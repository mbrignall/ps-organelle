#+TITLE: Patchstorage Patches Downloader
#+AUTHOR: mbrignall
#+DATE: <2024-09-10>

* What is this Patch Downloader?

[[img/organelle.png]]

~Work in Progress~

I absolutely love the Organelle from Critter and Guitari!

It has become an essential tool in my creative process, helping me generate musical ideas, experiment with effects, and explore Pure Data. The best part is the community they've built around their instruments, which keeps the inspiration flowing. You can learn more about it [[https://www.critterandguitari.com/organelle][here]].

[[https://patchstorage.com/][Patchstorage]] is an excellent community-driven platform of Audio and Visual programming enthusiasts and it turns out they have a neat [[https://github.com/patchstorage/patchstorage-docs/wiki][API]]!

This project provides a Python script that downloads patches for the *Organelle* platform from Patchstorage and organizes them into folders based on their categories, for example:

    - Synthesizers
    - Effects
    - etc.

Each patch entry includes the *title*, *author*, *URL*, *description excerpt*, and *tags*, with the tags neatly aligned to the right for easy readability in Emacs using Org Mode.

** Why Use Org Mode for Patchstorage Patches?

#+ATTR_HTML: :class center
[[img/org-mode-unicorn.svg]]

Org mode allows you to neatly structure patch information with headers and tags, making it easy to navigate, search, and manage large sets of data directly within Emacs.

  - *Folding headers*: You can collapse or expand sections for easy navigation of categories and patches.
  - *Tag searching*: Quickly filter patches based on tags, or keywords to find specific types of patches.
  - *Integration with Emacs*: Org mode provides powerful search, editing, and navigation capabilities, all within the same environment.
  - *Export capabilities*: Easily export your patch data to other formats like HTML or PDF.
  - *Literate programming*: If needed, you can combine patch data with executable code for dynamic content generation.

** Features
  - Fetches patches for the Organelle platform from Patchstorage.
  - Generates an Org-mode file with basic patch information (title, author, description excerpt, URL, tags).
  - Allows filtering patches by category or tag.
  - Exports patch information into an Org-mode file for easy navigation in Emacs.

** Requirements
  - A Patchstorage API token (stored securely in an environment variable).
  - Python 3.x
  - ~requests~ library
  - ~python-dotenv~ library

** Installation

  - Clone the repository:
     #+begin_src bash
       git clone https://github.com/mbrignall/ps-organelle.git
       cd ps-organelle
       poetry install
     #+end_src

  - Set up your Patchstorage API token by adding it to a `.env` file in the project root:
   
     ~PATCHSTORAGE_API_TOKEN=your_api_token_here~
   
** Usage

The main script, =ps-organelle.py=, is used to fetch patches for the Organelle platform from Patchstorage. You can use different flags to customize the fetch and export behavior:

  - To fetch and download all patches:
    #+begin_src bash
    poetry run python ps_organelle.py --full
    #+end_src

  - To fetch and export all patches to an Org-mode file:
    #+begin_src bash
    poetry run python ps_organelle.py --full --org
    #+end_src

  - To fetch patches filtered by category:
    #+begin_src bash
    poetry run python ps_organelle.py --category Synthesizer
    #+end_src

  - To fetch patches filtered by tag and export them to Org mode:
    #+begin_src bash
    poetry run python ps_organelle.py --tag reverb --org
    #+end_src

  - The script will generate a file called =patches.org= in the project directory if the `--org` flag is provided.

  - Open the =patches.org= file in Emacs to browse the patch information.

** Example Output

Here is an example of the output in the =patches.org= file:

#+begin_src org
- Synthesizer
  -- KarPluck FM                              :karplus_strong:pluck:poly:string:
    - Author: enomorricone
    - URL: https://patchstorage.com/karpluck-fm/
    - Description:
      A simple but versatile string synthesizer, capable of a range from lo-fi piano sounds to...

  -- FMMOD6                                                       :fm:modulator:
    - Author: user123
    - URL: https://patchstorage.com/fmmod6/
    - Description:
      A complex FM synthesizer patch that allows deep modulation of parameters...
#+end_src

** License
This project is licensed under the MIT License. See the LICENSE file for details.
